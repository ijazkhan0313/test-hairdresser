import{f as u,_ as p,r as G,o as l,c as h,a as s,b as c,w as m,F as f}from"./C2egFmNW.js";import{A as _}from"./lEC4QW_W.js";import{u as N}from"./C-QmXMO2.js";import{_ as T}from"./evITL-mf.js";import{_ as g}from"./lXXSD6iP.js";import"./C4iS2aBk.js";const x={name:"NoiseMusicGain",components:{AudioElement:_},data(){return{audioContext:N().getContext(),playing:!1,paused:!1,createdNodes:{},forest_src:window.location.origin+u().public.forest_src,noise_src:window.location.origin+u().public.noise_src}},methods:{handlePlayingUpdate(){const e=this.$refs.Noise.$refs.audioElement,a=this.$refs.Music.$refs.audioElement,n=this.audioContext,i=this.audioContext.destination;this.createdNodes.musicGain||=n.createGain(),this.createdNodes.noiseGain||=n.createGain(),this.createdNodes.musicGain.gain.setValueAtTime(0,n.currentTime),this.createdNodes.noiseGain.gain.setValueAtTime(0,n.currentTime),a.muted=!1,e.muted=!1,this.createdNodes.noiseSource=n.createMediaElementSource(e),this.createdNodes.musicSource=n.createMediaElementSource(a),this.createdNodes.noiseSource.connect(this.createdNodes.noiseGain),this.createdNodes.musicSource.connect(this.createdNodes.musicGain),this.createdNodes.noiseGain.connect(i),this.createdNodes.musicGain.connect(i),this.fadeInGains()},fadeInGains(){const t=this.createdNodes.noiseGain,e=this.createdNodes.musicGain;t.gain.linearRampToValueAtTime(1,t.context.currentTime+7),e.gain.linearRampToValueAtTime(1,e.context.currentTime+5)},fadeOutGains(){this.createdNodes.noiseGain.gain.linearRampToValueAtTime(0,this.createdNodes.noiseGain.context.currentTime+3),this.createdNodes.musicGain.gain.linearRampToValueAtTime(0,this.createdNodes.musicGain.context.currentTime+3)},updateNoiseGain(t){this.createdNodes.noiseGain.gain.linearRampToValueAtTime(t,this.createdNodes.noiseGain.context.currentTime+.3)},updateMusicGain(t){this.createdNodes.musicGain.gain.linearRampToValueAtTime(t,this.createdNodes.musicGain.context.currentTime+.3)}}},A=s("h1",null,"Test Version NoiseMusicGain and FadeIn: mit WebAudio & Gain, ohne Noise-Patch & ohne Music-Patch",-1),E=s("h2",null," Obwohl die Methode linearRampToValueAtTime verwendet wird, startet das audio einfach nach der eingestellten Zeit ohne fade",-1),M=s("img",{style:{width:"25px"},src:T},null,-1),V=s("img",{style:{width:"25px"},src:g},null,-1);function w(t,e,r,a,n,i){const d=G("AudioElement");return l(),h(f,null,[A,E,s("button",{onClick:e[0]||(e[0]=(...o)=>i.fadeInGains&&i.fadeInGains(...o))}," Trigger FadeIn "),s("button",{onClick:e[1]||(e[1]=(...o)=>i.fadeOutGains&&i.fadeOutGains(...o))}," Trigger FadeOut "),c(d,{ref:"Noise",key:"5",src:n.noise_src,title:"Noise","onUpdate:volume":i.updateNoiseGain},{default:m(({})=>[M]),_:1},8,["src","onUpdate:volume"]),c(d,{ref:"Music",key:"1",src:n.forest_src,title:"Forest","onUpdate:volume":i.updateMusicGain,"onUpdate:playing":i.handlePlayingUpdate},{default:m(({})=>[V]),_:1},8,["src","onUpdate:volume","onUpdate:playing"])],64)}const C=p(x,[["render",w]]),v={__name:"NoiseMusicGainFadeIn",setup(t){return(e,r)=>(l(),h("div",null,[c(C)]))}};export{v as default};
