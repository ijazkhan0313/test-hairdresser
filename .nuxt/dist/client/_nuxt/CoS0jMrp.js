import{u as E,c as C}from"./C-QmXMO2.js";import{i as w}from"./O97EOHsH.js";import{i as x}from"./DQqw_gti.js";import{A as N}from"./CMS5Braa.js";import{H as m}from"./D3j8g8Cz.js";import{j as b}from"./C2egFmNW.js";import{u as M}from"./Cq3l7X6R.js";function Y(o,t){return b(),o===N.Yes&&t===m.OverEar?.0562:o===N.No&&t===m.OverEar?.5623:o===N.Yes&&t===m.InEar?.0316:o===N.No&&t===m.InEar?.1778:.5623}async function T(o,t){const e=E();o.disconnect(),t.disconnect();const g=e.addNode("noiseAudioSource",o),a=await M().getMicrophone(),n=a.microphoneNode?.context,i=n.createGain(),s=n.createGain();i.gain.value=0,s.gain.value=0,e.addNode("musicGainNode",i),e.addNode("noiseGainNode",s);const d=await C(n,x),c=await C(n,w),u=e.addNode("noiseDevice",d.node),D=new ChannelSplitterNode(n,{numberOfOutputs:2}),G=new ChannelSplitterNode(n,{numberOfOutputs:2}),r=e.addNode("musicInputChannelSplitter",G),l=e.addNode("noiseInputChannelSplitter",D);await C(n,w).then(S=>{const p=S.node,h=new ChannelSplitterNode(n,{numberOfOutputs:2}),v=a.microphoneNode,O=t;v.disconnect(),O.disconnect();const I=n.createChannelSplitter(2);O.connect(h),v.connect(p,0,0),h.connect(p,0,1),h.connect(p,1,2),I.connect(d.node,0,3),I.connect(d.node,1,4),p.connect(i,0,0),i.connect(n.destination)});try{a&&c&&e.connectNodes(a,c,0,0),t&&r&&e.connectNodes(t,r,0,0),c&&r&&e.connectNodes(r,c,0,1),c&&r&&e.connectNodes(r,c,1,2)}catch{}e.connectNodes(c,i),e.connectNodes(a,u,0,0),e.connectNodes(g,l,0,0),e.connectNodes(l,u,0,1),e.connectNodes(l,u,1,2),u.node.connect(s,0,0),s.connect(s.context.destination);const y=d.parametersById.get("attenuation");y.value=Y("Yes","OverEar");const f=new Array;return f.push(i),f.push(s),f}export{T as s};
